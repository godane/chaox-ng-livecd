--- rc.sysinit.orig	2009-03-10 13:15:50.000000000 +0100
+++ rc.sysinit	2009-03-10 13:22:25.000000000 +0100
@@ -7,6 +7,10 @@
 . /etc/rc.d/functions
 
 echo " "
+printhl "Chaox\n"
+printhl	"Copyleft 2008-2009 ${C_H2}http://blag.chaox.net"
+printhl "based on:"
+echo " "
 printhl "Arch Linux\n"
 printhl "${C_H2}http://www.archlinux.org"
 printhl "Copyright 2002-2007 Judd Vinet"
@@ -150,87 +154,6 @@
 	fi
 fi
 
-# Set up non-root encrypted partition mappings
-if [ -f /etc/crypttab -a -n "$(/bin/grep -v ^# /etc/crypttab | /bin/grep -v ^$)" ]; then
-	/sbin/modprobe -q dm-mod 2>/dev/null
-	stat_busy "Unlocking encrypted volumes:"
-	csfailed=0
-	CS=/sbin/cryptsetup.static
-	do_crypt() {
-		if [ $# -ge 3 ]; then
-			cname="$1"
-			csrc="$2"
-			cpass="$3"
-			shift 3
-			copts="$*"
-			stat_append "${cname}.."
-			# For some fun reason, the parameter ordering varies for
-			# LUKS and non-LUKS devices.  Joy.
-			if [ "${cpass}" = "SWAP" ]; then
-				# This is DANGEROUS! The only possible safety check
-				# is to not proceed in case we find a LUKS device
-				# This may cause dataloss if it is not used carefully
-				if $CS isLuks $csrc 2>/dev/null; then
-					false
-				else
-					$CS -d /dev/urandom $copts create $cname $csrc >/dev/null
-					if [ $? -eq 0 ]; then
-						stat_append "creating swapspace.."
-						/sbin/mkswap -L $cname /dev/mapper/$cname >/dev/null
-					fi
-				fi
-			elif [ "${cpass}" = "ASK" ]; then
-				printf "\nOpening '${cname}' volume:\n"
-
-				if $CS isLuks $csrc 2>/dev/null; then
-					$CS $copts luksOpen $csrc $cname < /dev/console
-				else
-					$CS $copts create $cname $csrc < /dev/console
-				fi
-			elif [ "${cpass:0:1}" != "/" ]; then
-				if $CS isLuks $csrc 2>/dev/null; then
-					echo "$cpass" | $CS $copts luksOpen $csrc $cname >/dev/null
-				else
-					echo "$cpass" | $CS $copts create $cname $csrc >/dev/null
-				fi
-			else
-				if $CS isLuks $csrc 2>/dev/null; then
-					$CS -d $cpass $copts luksOpen $csrc $cname >/dev/null
-				else
-					$CS -d $cpass $copts create $cname $csrc >/dev/null
-				fi
-			fi
-			if [ $? -ne 0 ]; then
-				csfailed=1
-				stat_append "failed "
-			else
-				stat_append "ok "
-			fi
-		fi
-	}
-	while read line; do
-		eval do_crypt "$line"
-	done </etc/crypttab
-	if [ $csfailed -eq 0 ]; then
-		stat_done
-	else
-		stat_fail
-	fi
-	# Maybe someone has LVM on an encrypted block device
-	if [ "$USELVM" = "yes" -o "$USELVM" = "YES" ]; then
-		if [ -x /sbin/lvm -a -d /sys/block ]; then
-			/sbin/lvm vgscan --ignorelockingfailure --mknodes >/dev/null
-			/sbin/lvm vgchange --ignorelockingfailure -a y >/dev/null
-		fi
-	fi
-fi
-
-status "Mounting Root Read-only" /bin/mount -n -o remount,ro /
-
-FORCEFSCK=
-[ -f /forcefsck ] && FORCEFSCK="-- -f"
-NETFS="nonfs,nonfs4,nosmbfs,nocifs,nocodafs,noncpfs,nosysfs,noshfs,nofuse,nofuseblk"
-
 fsck_reboot() {
 	echo "Automatic reboot in progress..."
 	/bin/umount -a
@@ -239,46 +162,7 @@
 	exit 0
 }
 
-if [ -x /sbin/fsck ]; then
-	stat_busy "Checking Filesystems"
-	FSCK_OUT=/dev/stdout
-	FSCK_ERR=/dev/null
-	/sbin/fsck -A -T -C -a -t $NETFS $FORCEFSCK >$FSCK_OUT 2>$FSCK_ERR
-	fsckret=$?
-	if [ ${fsckret} -gt 1 ]; then
-		stat_fail
-	fi
-	if [ $((${fsckret}&2)) -eq 2 ]; then
-		echo
-		echo "********************** REBOOT REQUIRED *********************"
-		echo "*                                                          *"
-		echo "* The system will be rebooted automatically in 15 seconds. *"
-		echo "*                                                          *"
-		echo "************************************************************"
-		echo
-		/bin/sleep 15
-		fsck_reboot
-	fi
-	if [ ${fsckret} -gt 1 -a ${fsckret} -ne 32 ]; then
-		echo
-		echo "*****************  FILESYSTEM CHECK FAILED  ****************"
-		echo "*                                                          *"
-		echo "*  Please repair manually and reboot. Note that the root   *"
-		echo "*  file system is currently mounted read-only. To remount  *"
-		echo "*  it read-write type: mount -n -o remount,rw /            *"
-		echo "*  When you exit the maintenance shell the system will     *"
-		echo "*  reboot automatically.                                   *"
-		echo "*                                                          *"
-		echo "************************************************************"
-		echo
-		/sbin/sulogin -p
-		fsck_reboot
-	fi
-	stat_done
-fi
-
 stat_busy "Mounting Local Filesystems"
-/bin/mount -n -o remount,rw /
 /bin/rm -f /etc/mtab*
 # make sure / gets written to /etc/mtab
 /bin/mount -o remount,rw /
@@ -286,8 +170,7 @@
 if [ -e /proc/mounts ]; then
 	/bin/grep -e "/proc " -e "/sys " -e "/dev " /proc/mounts >> /etc/mtab
 fi
-# now mount all the local filesystems
-/bin/mount -a -t $NETFS
+mount -a
 stat_done
 
 status "Activating Swap" /sbin/swapon -a
@@ -331,14 +214,6 @@
 	status "Setting Hostname: $HOSTNAME" /bin/hostname $HOSTNAME
 fi
 
-# Set the NIS domain name, if necessary
-[ -f /etc/conf.d/nisdomainname ] && . /etc/conf.d/nisdomainname
-if [ "$NISDOMAINNAME" != "" ]; then
-	status "Setting NIS Domain Name: $NISDOMAINNAME" /bin/nisdomainname $NISDOMAINNAME
-fi
-
-status "Updating Module Dependencies" /sbin/depmod -A
-
 # Flush old locale settings
 : >/etc/profile.d/locale.sh
 /bin/chmod 755 /etc/profile.d/locale.sh
@@ -360,7 +235,6 @@
 	# the $CONSOLE check helps us avoid this when running scripts from cron
 	echo 'if [ "$CONSOLE" = "" -a "$TERM" = "linux" -a -t 1 ]; then printf "\e%%G"; fi' >>/etc/profile.d/locale.sh
 	stat_done
-	[ -n "$KEYMAP" ] && status "Loading Keyboard Map: $KEYMAP" /bin/loadkeys -q -u $KEYMAP
 else
 	stat_busy "Setting Consoles to legacy mode"
 	# make non-UTF-8 consoles work on 2.6.24 and newer kernels
@@ -371,7 +245,6 @@
 	# the $CONSOLE check helps us avoid this when running scripts from cron
 	echo 'if [ "$CONSOLE" = "" -a "$TERM" = "linux" -a -t 1 ]; then printf "\e%%@"; fi' >>/etc/profile.d/locale.sh
 	stat_done
-	[ -n "$KEYMAP" ] && status "Loading Keyboard Map: $KEYMAP" /bin/loadkeys -q $KEYMAP
 fi
 
 if [ -n "$CONSOLEFONT" ]; then
