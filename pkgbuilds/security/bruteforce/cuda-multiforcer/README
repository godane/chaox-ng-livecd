Parameters
-h / --hashtype {MD4,MD5,NTLM} (required) This specifies the hash type to search.
-c / --charsetfile <filename> (required) This specifies the charset file. The downloads come with several demo character sets, but you can create your own. These are created as a simple file with the characters you wish to search for. These brute forcers do support foreign characters within the ASCII space, but do NOT SUPPORT UNICODE (yet). In verbose mode, the active character set will be echoed for confirmation.
-o / --outputfile (optional) This specifies the output for found hashes. The file will be appended, not overwritten.
-f / --hashfile (required) This specifies the file of hashes. Hashes should be in ASCII-hex format (as they are typically found), one per line. The file should end with a newline.
-v (optional) Verbose output. Signiicantly greater detail on what is occuring behind the scenes.
--min / --max (required) These set the minimum and maximum password lengths to search. Lengths of 0 through 14 are currently supported.
-d / --device (optional) If you have multiple CUDA-enabled video cards, this allows you to select which card to use. The current card is printed on program execution. Default is 0 (the first CUDA GPU in the system).
-m / --ms (optional) This specifies the target kernel time, in milliseconds (1/1000th of a second). When using a system with a GUI, lower times will allow better display response, but will lower performance. See below for more details. The default is 50ms, which should not interfere with general system use.
-b / --blocks (optional) Force a certain block count (default 128).
-t / --threads (optional) Force a certain thread count (default 64).
--maxthreads (optional) On higher end video cards (8800, 9800, GTX series), use the maximum number of threads per block instead of the default 64. This may improve performance. This option will cause kernel launch failures on lower end cards.
--autotune (optional) Attempt to automatically tune block count for best performance. This does not work very well on Vista. This is best combined with a very high per-kernel execution time and --maxthreads.
